name: ci
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  api:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/api/trader-assistant/trading-dashboard
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: gradle
      - run: ./gradlew spotlessCheck build test --no-daemon

      - name: OWASP Dependency-Check (report only)
        run: ./gradlew dependencyCheckAnalyze || true

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: api-reports
          path: |
            apps/api/trader-assistant/trading-dashboard/build/reports/tests/test/**
            apps/api/trader-assistant/trading-dashboard/build/reports/dependency-check-report.html
            apps/api/trader-assistant/trading-dashboard/build/reports/spotless/**

  publish-trading-dashboard-image:
    needs: api
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: read
      id-token: write
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
    defaults:
      run:
        working-directory: apps/api/trader-assistant/trading-dashboard
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          if [ "${GITHUB_REF_TYPE:-}" = "tag" ]; then
            IMAGE_TAG="${GITHUB_REF_NAME}"
          else
            IMAGE_TAG="${GITHUB_SHA}"
          fi

          docker build \
            --file Dockerfile \
            --tag "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \
            .

          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"